{
	"info": {
		"_postman_id": "02dcede3-b4e8-490c-ad58-96e21031482a",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос",
							"// 2.Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Проверить, что в body приходит правильный string.",
							"pm.test(\"First response\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72: 5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": " 5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User info 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json",
							"let jsonData = pm.response.json()",
							"",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Check name\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Anna\");",
							"});",
							"",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(+jsonData.age).to.eql(28);",
							"});",
							"",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Check salary\", function () {",
							"    pm.expect(jsonData.salary).to.eql (1500);",
							"});",
							"",
							"// 7. Спарсить request. \t",
							"let post_form_data = request.data;",
							"",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check name req\", function () {",
							"    pm.expect(request.data.name).to.eql(jsonData.name);",
							"});",
							"",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Check age req\", function () {",
							"    pm.expect(request.data.age).to.eql(jsonData.age);",
							"});",
							"",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Check salary req\", function () {",
							"    pm.expect(+request.data.salary).to.eql(jsonData.salary);",
							"});",
							"",
							"// 11. Вывести в консоль параметр family из response.",
							"let resp_family = jsonData.family",
							"console.log(\"resp_family =\" , resp_family)",
							"",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"let resp_salary_1_5_year = jsonData.family.u_salary_1_5_year",
							"pm.test(\"Check u_salary_1_5_year\", function () {",
							"     pm.expect(resp_salary_1_5_year).to.eql(request.data.salary *4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object info 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"let respData = pm.response.json()",
							"",
							"// 4. Спарсить request.",
							"let reqData = pm.request.url.query.toObject()",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Request name\", function () {",
							"    pm.expect(respData.name).to.eql(reqData.name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Request age\", function () {",
							"    pm.expect(respData.age).to.eql(reqData.age);",
							"});",
							"",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Request salary\", function () {",
							"    pm.expect(respData.salary).to.eql +(reqData.salary);",
							"});",
							"",
							"// 8. Вывести в консоль параметр family из response.",
							"console.log(respData.family)",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"let respDog = respData.family.pets.dog",
							"pm.test(\"Dog have name\", function () {",
							"    pm.expect(respDog).to.include.key(\"name\");",
							"});",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Dog have age\", function () {",
							"    pm.expect(respDog).to.include.key(\"age\");",
							"});",
							"",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"let respDogName = respData.family.pets.dog.name",
							"pm.test(\"Dog name is Luky\", function () {",
							"    pm.expect(respDogName).to.eql(\"Luky\");",
							"});",
							"",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"let respDogAge = respData.family.pets.dog.age",
							"pm.test(\"Dog age is 4\", function () {",
							"    pm.expect(respDogAge).to.eql (4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72: 5005/object_info_3?name=Anna&age=28&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": " 5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object info 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"let respData = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"let reqData = pm.request.url.query.toObject()",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Request name\", function () {",
							"    pm.expect(respData.name).to.eql(reqData.name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Request age\", function () {",
							"    pm.expect(respData.age).to.eql+(reqData.age);",
							"});",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"let reqSalary = reqData.salary",
							"console.log('req_salary = ' , reqSalary)",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"let respSalary = respData.salary",
							"console.log('resp_salary = ', respSalary)",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log('resp_salary [0] = ', respSalary[0])",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log('resp_salary [1] = ', respSalary[1])",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log('resp_salary [2] = ', respSalary[2])",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"[0] param salary eql reqSalary  \", function () {",
							"    pm.expect(respSalary[0]).to.eql(+reqSalary);",
							"});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"[1] param salary eql 2*reqSalary  \", function () {",
							"    pm.expect(respSalary[1]).to.eql((reqSalary * 2).toString());",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"[2] param salary eql 3*reqSalary  \", () => {",
							"    pm.expect(respSalary[2]).to.eql((reqSalary * 3).toString());",
							"});     ",
							"",
							"// 15.18. Создать и передать в окружении переменную name",
							"pm.environment.set(\"name\", reqData.name);",
							"",
							"// 16.19. Создать и передать в окружении переменную age",
							"pm.environment.set(\"age\", reqData.age);",
							"",
							"// 17.20. Создать и передать в окружении переменную salary",
							"pm.environment.set(\"salary\", reqData.salary);",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for (let i = 0; i < respSalary.length; i++) {",
							"    console.log('iii', respSalary[i])",
							"}       //старый способ написания цикла",
							"",
							"respSalary.forEach(salary => console.log(salary))       ",
							"//современный способ написания цикла с 1 основным аргументом если функция влазит в 1 строку",
							"",
							"respSalary.forEach((salary, index, arrDuplicate) => {",
							"        console.log(salary, index, arrDuplicate)",
							"    }",
							")       //современный способ написания цикла, используя максимально возможные 3 аргумента"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72: 5005/object_info_4?name=Anna&age=28&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": " 5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User info 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request",
							"// 2. Вставить параметр age из окружения в age",
							"// 3. Вставить параметр name из окружения в name",
							"// 4. Отправить запрос.",
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 6. Спарсить response body в json.",
							"let respData = pm.response.json();",
							"",
							"// 7. Спарсить request.",
							"let reqData = request.data",
							"",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Respons have param start_qa_salary\", function () {",
							"    pm.expect(respData).to.include.key(\"start_qa_salary\");",
							"});",
							"",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Respons have param qa_salary_after_6_months\", function () {",
							"    pm.expect(respData).to.include.key(\"qa_salary_after_6_months\");",
							"});",
							"",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Respons have param qa_salary_after_12_months\", function () {",
							"    pm.expect(respData).to.include.key(\"qa_salary_after_12_months\");",
							"});",
							"",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Respons have param qa_salary_after_1.5_year\", function () {",
							"    pm.expect(respData).to.include.key(\"qa_salary_after_1.5_year\");",
							"});",
							"",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Respons have param qa_salary_after_3.5_years\", function () {",
							"    pm.expect(respData).to.include.key(\"qa_salary_after_3.5_years\");",
							"});",
							"",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"Respons have param person\", function () {",
							"    pm.expect(respData).to.include.key(\"person\");",
							"});",
							"",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Resp start_qa_salary eql req salary \", function () {",
							"    pm.expect(respData.start_qa_salary).to.eql(+reqData.salary);",
							"});",
							"",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Resp qa_salary_after_6_months eql req salary*2 \", function () {",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql(+reqData.salary * 2);",
							"});",
							"",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"Resp qa_salary_after_12_months eql req salary*2.7 \", function () {",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql(+reqData.salary * 2.7);",
							"});",
							"",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Resp qa_salary_after_1.5_year eql req salary*3.3 \", function () {",
							"    pm.expect(respData[\"qa_salary_after_1.5_year\"]).to.eql(+reqData.salary * 3.3);",
							"});",
							"",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"Resp qa_salary_after_3.5_years eql req salary*3.8 \", function () {",
							"    pm.expect(respData[\"qa_salary_after_3.5_years\"]).to.eql(+reqData.salary * 3.8);",
							"});",
							"",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"let uName = respData.person.u_name",
							"pm.test(\"U_name[1] eql req salary \", function () {",
							"    pm.expect(uName[1]).to.eql(+reqData.salary);",
							"});",
							"",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"let uAge = respData.person.u_age",
							"pm.test(\"U_age eql req salary \", function () {",
							"    pm.expect(uAge).to.eql(+reqData.age);",
							"});",
							"",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"let salary5years = respData.person.u_salary_5_years",
							"pm.test(\"Resp u_salary_5_years eql req salary*4.2 \", function () {",
							"    pm.expect(salary5years).to.eql(reqData.salary * 4.2);",
							"});",
							"",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"let respPerson = respData.person",
							"// let respPerson = respData['person'] //спасоб написания, если нельзя поставить точку для строки",
							"",
							"for (key in respPerson) {",
							"   console.log(respPerson[key])",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72: 5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": " 5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}